"""autogenerated by genmsg_py from GetInstallationStateRequest.msg. Do not edit."""
import roslib.message
import struct


class GetInstallationStateRequest(roslib.message.Message):
  _md5sum = "f7e64723808960ca985ba81f45f1b8a7"
  _type = "app_manager/GetInstallationStateRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool remote_update

"""
  __slots__ = ['remote_update']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       remote_update
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetInstallationStateRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.remote_update is None:
        self.remote_update = False
    else:
      self.remote_update = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.remote_update))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.remote_update,) = _struct_B.unpack(str[start:end])
      self.remote_update = bool(self.remote_update)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.remote_update))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.remote_update,) = _struct_B.unpack(str[start:end])
      self.remote_update = bool(self.remote_update)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genmsg_py from GetInstallationStateResponse.msg. Do not edit."""
import roslib.message
import struct

import app_manager.msg

class GetInstallationStateResponse(roslib.message.Message):
  _md5sum = "46d45bbda08250199267aff8c0ee8c41"
  _type = "app_manager/GetInstallationStateResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ExchangeApp[] installed_apps
ExchangeApp[] available_apps

================================================================================
MSG: app_manager/ExchangeApp
# app name
string name
# user-friendly display name of application
string display_name
# the version of the package currently installed
string version
# latest version of the package avaliable
string latest_version
# the detailed description of the app
string description
# icon for showing app
Icon icon
# hidden apps are not show - used for cases where multiple apps are in a deb
bool hidden
================================================================================
MSG: app_manager/Icon
# Image data format.  "jpeg" or "png"
string format

# Image data.
uint8[] data

"""
  __slots__ = ['installed_apps','available_apps']
  _slot_types = ['app_manager/ExchangeApp[]','app_manager/ExchangeApp[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       installed_apps,available_apps
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(GetInstallationStateResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.installed_apps is None:
        self.installed_apps = []
      if self.available_apps is None:
        self.available_apps = []
    else:
      self.installed_apps = []
      self.available_apps = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.installed_apps)
      buff.write(_struct_I.pack(length))
      for val1 in self.installed_apps:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.display_name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.latest_version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.icon
        _x = _v1.format
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.hidden))
      length = len(self.available_apps)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_apps:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.display_name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.latest_version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v2 = val1.icon
        _x = _v2.format
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v2.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.hidden))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.installed_apps = []
      for i in range(0, length):
        val1 = app_manager.msg.ExchangeApp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.display_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.latest_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.description = str[start:end]
        _v3 = val1.icon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v3.format = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v3.data = str[start:end]
        start = end
        end += 1
        (val1.hidden,) = _struct_B.unpack(str[start:end])
        val1.hidden = bool(val1.hidden)
        self.installed_apps.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_apps = []
      for i in range(0, length):
        val1 = app_manager.msg.ExchangeApp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.display_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.latest_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.description = str[start:end]
        _v4 = val1.icon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v4.format = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v4.data = str[start:end]
        start = end
        end += 1
        (val1.hidden,) = _struct_B.unpack(str[start:end])
        val1.hidden = bool(val1.hidden)
        self.available_apps.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.installed_apps)
      buff.write(_struct_I.pack(length))
      for val1 in self.installed_apps:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.display_name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.latest_version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.icon
        _x = _v5.format
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v5.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.hidden))
      length = len(self.available_apps)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_apps:
        _x = val1.name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.display_name
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.latest_version
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.description
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v6 = val1.icon
        _x = _v6.format
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v6.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(val1.hidden))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.installed_apps = []
      for i in range(0, length):
        val1 = app_manager.msg.ExchangeApp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.display_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.latest_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.description = str[start:end]
        _v7 = val1.icon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v7.format = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v7.data = str[start:end]
        start = end
        end += 1
        (val1.hidden,) = _struct_B.unpack(str[start:end])
        val1.hidden = bool(val1.hidden)
        self.installed_apps.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_apps = []
      for i in range(0, length):
        val1 = app_manager.msg.ExchangeApp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.display_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.latest_version = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.description = str[start:end]
        _v8 = val1.icon
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v8.format = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v8.data = str[start:end]
        start = end
        end += 1
        (val1.hidden,) = _struct_B.unpack(str[start:end])
        val1.hidden = bool(val1.hidden)
        self.available_apps.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class GetInstallationState(roslib.message.ServiceDefinition):
  _type          = 'app_manager/GetInstallationState'
  _md5sum = '28f0a7294f6241e2423a9382e3c76987'
  _request_class  = GetInstallationStateRequest
  _response_class = GetInstallationStateResponse
