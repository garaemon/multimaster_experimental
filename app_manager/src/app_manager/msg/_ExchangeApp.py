"""autogenerated by genmsg_py from ExchangeApp.msg. Do not edit."""
import roslib.message
import struct

import app_manager.msg

class ExchangeApp(roslib.message.Message):
  _md5sum = "ccad20aa9f390121e44c61d218038d78"
  _type = "app_manager/ExchangeApp"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# app name
string name
# user-friendly display name of application
string display_name
# the version of the package currently installed
string version
# latest version of the package avaliable
string latest_version
# the detailed description of the app
string description
# icon for showing app
Icon icon
# hidden apps are not show - used for cases where multiple apps are in a deb
bool hidden
================================================================================
MSG: app_manager/Icon
# Image data format.  "jpeg" or "png"
string format

# Image data.
uint8[] data

"""
  __slots__ = ['name','display_name','version','latest_version','description','icon','hidden']
  _slot_types = ['string','string','string','string','string','app_manager/Icon','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       name,display_name,version,latest_version,description,icon,hidden
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExchangeApp, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.display_name is None:
        self.display_name = ''
      if self.version is None:
        self.version = ''
      if self.latest_version is None:
        self.latest_version = ''
      if self.description is None:
        self.description = ''
      if self.icon is None:
        self.icon = app_manager.msg.Icon()
      if self.hidden is None:
        self.hidden = False
    else:
      self.name = ''
      self.display_name = ''
      self.version = ''
      self.latest_version = ''
      self.description = ''
      self.icon = app_manager.msg.Icon()
      self.hidden = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.display_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.version
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.latest_version
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.description
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.icon.format
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.icon.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.hidden))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.icon is None:
        self.icon = app_manager.msg.Icon()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.display_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.latest_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.icon.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.icon.data = str[start:end]
      start = end
      end += 1
      (self.hidden,) = _struct_B.unpack(str[start:end])
      self.hidden = bool(self.hidden)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.display_name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.version
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.latest_version
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.description
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.icon.format
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.icon.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.hidden))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.icon is None:
        self.icon = app_manager.msg.Icon()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.display_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.latest_version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.description = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.icon.format = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.icon.data = str[start:end]
      start = end
      end += 1
      (self.hidden,) = _struct_B.unpack(str[start:end])
      self.hidden = bool(self.hidden)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
