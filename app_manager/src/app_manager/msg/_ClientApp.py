"""autogenerated by genmsg_py from ClientApp.msg. Do not edit."""
import roslib.message
import struct

import app_manager.msg

class ClientApp(roslib.message.Message):
  _md5sum = "0a8112672c3fbf73cb62ec78d67e41bb"
  _type = "app_manager/ClientApp"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# like "android" or "web" or "linux"
string client_type

# like "intent = ros.android.teleop" and "accelerometer = true", used to choose which ClientApp to use
KeyValue[] manager_data

# parameters which just get passed through to the client app.
KeyValue[] app_data

================================================================================
MSG: app_manager/KeyValue
string key
string value

"""
  __slots__ = ['client_type','manager_data','app_data']
  _slot_types = ['string','app_manager/KeyValue[]','app_manager/KeyValue[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       client_type,manager_data,app_data
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ClientApp, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.client_type is None:
        self.client_type = ''
      if self.manager_data is None:
        self.manager_data = []
      if self.app_data is None:
        self.app_data = []
    else:
      self.client_type = ''
      self.manager_data = []
      self.app_data = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.client_type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.manager_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.manager_data:
        _x = val1.key
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.app_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.app_data:
        _x = val1.key
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.client_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.manager_data = []
      for i in range(0, length):
        val1 = app_manager.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.value = str[start:end]
        self.manager_data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.app_data = []
      for i in range(0, length):
        val1 = app_manager.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.value = str[start:end]
        self.app_data.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.client_type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.manager_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.manager_data:
        _x = val1.key
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.app_data)
      buff.write(_struct_I.pack(length))
      for val1 in self.app_data:
        _x = val1.key
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.client_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.manager_data = []
      for i in range(0, length):
        val1 = app_manager.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.value = str[start:end]
        self.manager_data.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.app_data = []
      for i in range(0, length):
        val1 = app_manager.msg.KeyValue()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.value = str[start:end]
        self.app_data.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
