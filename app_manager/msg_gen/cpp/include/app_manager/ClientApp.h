/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-electric-multimaster-experimental-0.1.9/debian/ros-electric-multimaster-experimental/opt/ros/electric/stacks/multimaster_experimental/app_manager/msg/ClientApp.msg */
#ifndef APP_MANAGER_MESSAGE_CLIENTAPP_H
#define APP_MANAGER_MESSAGE_CLIENTAPP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "app_manager/KeyValue.h"
#include "app_manager/KeyValue.h"

namespace app_manager
{
template <class ContainerAllocator>
struct ClientApp_ {
  typedef ClientApp_<ContainerAllocator> Type;

  ClientApp_()
  : client_type()
  , manager_data()
  , app_data()
  {
  }

  ClientApp_(const ContainerAllocator& _alloc)
  : client_type(_alloc)
  , manager_data(_alloc)
  , app_data(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _client_type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  client_type;

  typedef std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other >  _manager_data_type;
  std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other >  manager_data;

  typedef std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other >  _app_data_type;
  std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other >  app_data;


  ROS_DEPRECATED uint32_t get_manager_data_size() const { return (uint32_t)manager_data.size(); }
  ROS_DEPRECATED void set_manager_data_size(uint32_t size) { manager_data.resize((size_t)size); }
  ROS_DEPRECATED void get_manager_data_vec(std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other > & vec) const { vec = this->manager_data; }
  ROS_DEPRECATED void set_manager_data_vec(const std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other > & vec) { this->manager_data = vec; }
  ROS_DEPRECATED uint32_t get_app_data_size() const { return (uint32_t)app_data.size(); }
  ROS_DEPRECATED void set_app_data_size(uint32_t size) { app_data.resize((size_t)size); }
  ROS_DEPRECATED void get_app_data_vec(std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other > & vec) const { vec = this->app_data; }
  ROS_DEPRECATED void set_app_data_vec(const std::vector< ::app_manager::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::app_manager::KeyValue_<ContainerAllocator> >::other > & vec) { this->app_data = vec; }
private:
  static const char* __s_getDataType_() { return "app_manager/ClientApp"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0a8112672c3fbf73cb62ec78d67e41bb"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# like \"android\" or \"web\" or \"linux\"\n\
string client_type\n\
\n\
# like \"intent = ros.android.teleop\" and \"accelerometer = true\", used to choose which ClientApp to use\n\
KeyValue[] manager_data\n\
\n\
# parameters which just get passed through to the client app.\n\
KeyValue[] app_data\n\
\n\
================================================================================\n\
MSG: app_manager/KeyValue\n\
string key\n\
string value\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, client_type);
    ros::serialization::serialize(stream, manager_data);
    ros::serialization::serialize(stream, app_data);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, client_type);
    ros::serialization::deserialize(stream, manager_data);
    ros::serialization::deserialize(stream, app_data);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(client_type);
    size += ros::serialization::serializationLength(manager_data);
    size += ros::serialization::serializationLength(app_data);
    return size;
  }

  typedef boost::shared_ptr< ::app_manager::ClientApp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::app_manager::ClientApp_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ClientApp
typedef  ::app_manager::ClientApp_<std::allocator<void> > ClientApp;

typedef boost::shared_ptr< ::app_manager::ClientApp> ClientAppPtr;
typedef boost::shared_ptr< ::app_manager::ClientApp const> ClientAppConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::app_manager::ClientApp_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::app_manager::ClientApp_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace app_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::app_manager::ClientApp_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::app_manager::ClientApp_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::app_manager::ClientApp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0a8112672c3fbf73cb62ec78d67e41bb";
  }

  static const char* value(const  ::app_manager::ClientApp_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0a8112672c3fbf73ULL;
  static const uint64_t static_value2 = 0xcb62ec78d67e41bbULL;
};

template<class ContainerAllocator>
struct DataType< ::app_manager::ClientApp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "app_manager/ClientApp";
  }

  static const char* value(const  ::app_manager::ClientApp_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::app_manager::ClientApp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# like \"android\" or \"web\" or \"linux\"\n\
string client_type\n\
\n\
# like \"intent = ros.android.teleop\" and \"accelerometer = true\", used to choose which ClientApp to use\n\
KeyValue[] manager_data\n\
\n\
# parameters which just get passed through to the client app.\n\
KeyValue[] app_data\n\
\n\
================================================================================\n\
MSG: app_manager/KeyValue\n\
string key\n\
string value\n\
\n\
";
  }

  static const char* value(const  ::app_manager::ClientApp_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::app_manager::ClientApp_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.client_type);
    stream.next(m.manager_data);
    stream.next(m.app_data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ClientApp_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::app_manager::ClientApp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::app_manager::ClientApp_<ContainerAllocator> & v) 
  {
    s << indent << "client_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.client_type);
    s << indent << "manager_data[]" << std::endl;
    for (size_t i = 0; i < v.manager_data.size(); ++i)
    {
      s << indent << "  manager_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::app_manager::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.manager_data[i]);
    }
    s << indent << "app_data[]" << std::endl;
    for (size_t i = 0; i < v.app_data.size(); ++i)
    {
      s << indent << "  app_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::app_manager::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.app_data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // APP_MANAGER_MESSAGE_CLIENTAPP_H

