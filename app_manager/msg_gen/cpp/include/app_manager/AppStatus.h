/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-electric-multimaster-experimental-0.1.9/debian/ros-electric-multimaster-experimental/opt/ros/electric/stacks/multimaster_experimental/app_manager/msg/AppStatus.msg */
#ifndef APP_MANAGER_MESSAGE_APPSTATUS_H
#define APP_MANAGER_MESSAGE_APPSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace app_manager
{
template <class ContainerAllocator>
struct AppStatus_ {
  typedef AppStatus_<ContainerAllocator> Type;

  AppStatus_()
  : type(0)
  , status()
  {
  }

  AppStatus_(const ContainerAllocator& _alloc)
  : type(0)
  , status(_alloc)
  {
  }

  typedef int32_t _type_type;
  int32_t type;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;

  enum { INFO = 0 };
  enum { WARN = 1 };
  enum { ERROR = 2 };

private:
  static const char* __s_getDataType_() { return "app_manager/AppStatus"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4f59466d6810d5e9557e6b8ff75c9437"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int32 INFO=0\n\
int32 WARN=1\n\
int32 ERROR=2\n\
# Status type.  One of INFO, WARN, ERROR.\n\
int32 type\n\
# Status message.\n\
string status\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, type);
    ros::serialization::serialize(stream, status);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, type);
    ros::serialization::deserialize(stream, status);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(type);
    size += ros::serialization::serializationLength(status);
    return size;
  }

  typedef boost::shared_ptr< ::app_manager::AppStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::app_manager::AppStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AppStatus
typedef  ::app_manager::AppStatus_<std::allocator<void> > AppStatus;

typedef boost::shared_ptr< ::app_manager::AppStatus> AppStatusPtr;
typedef boost::shared_ptr< ::app_manager::AppStatus const> AppStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::app_manager::AppStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::app_manager::AppStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace app_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::app_manager::AppStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::app_manager::AppStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::app_manager::AppStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f59466d6810d5e9557e6b8ff75c9437";
  }

  static const char* value(const  ::app_manager::AppStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4f59466d6810d5e9ULL;
  static const uint64_t static_value2 = 0x557e6b8ff75c9437ULL;
};

template<class ContainerAllocator>
struct DataType< ::app_manager::AppStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "app_manager/AppStatus";
  }

  static const char* value(const  ::app_manager::AppStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::app_manager::AppStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 INFO=0\n\
int32 WARN=1\n\
int32 ERROR=2\n\
# Status type.  One of INFO, WARN, ERROR.\n\
int32 type\n\
# Status message.\n\
string status\n\
\n\
";
  }

  static const char* value(const  ::app_manager::AppStatus_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::app_manager::AppStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AppStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::app_manager::AppStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::app_manager::AppStatus_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};


} // namespace message_operations
} // namespace ros

#endif // APP_MANAGER_MESSAGE_APPSTATUS_H

